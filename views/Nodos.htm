<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta http-equiv="X-UA-Compatible" content="IE=edge" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>Document</title>
	</head>
	<style>
		* {
			padding: 0;
			margin: 0;
			box-sizing: border-box;
		}

		header {
			position: sticky;
			background: rgb(19, 19, 19);
			width: 100%;
			box-shadow: 0px 5px 5px black;
		}

		nav {
			text-align: center;
		}

		.title {
			color: rgb(168, 79, 6);
			height: 60px;
			line-height: 60px;
			letter-spacing: 2px;
			font-weight: bold;
			font-size: 43px;
			text-decoration: none;
			font-family: 'Courier New', Courier, monospace;
		}

		.title-color {
			text-align: center;
			color: rgb(255, 204, 0);
			letter-spacing: 2px;
			font-size: 43px;
			font-weight: bold;
			font-family: 'Courier New', Courier, monospace;
		}

		body {
			text-align: center;
			font-family: sans-serif;
			background: rgb(39, 39, 39);
		}

		body h1 {
			text-align: center;
			font-family: 'Courier New', Courier, monospace;
			margin-top: 150px;
			font-size: 4.2rem;
			padding-left: 5%;
			padding-right: 5%;
			color: rgb(255, 255, 255);
		}
		.node {
			fill: #ccc;
			stroke: #fff;
			stroke-width: 2px;
		}
		.link {
			stroke: #777;
			stroke-width: 2px;
		}
	</style>
	<body>
		<header>
			<nav class="navbar">
				<a href="/" class="title"
					>MAMA<span class="title-color">DUCK</span></a
				>
			</nav>
		</header>
		<canvas id="network" width="1000" height="800"></canvas>
		<script src="https://d3js.org/d3.v4.min.js"></script>
		<script>
			let graph = {
				nodes: [
					{ name: 'Node 1', status: 'Active' },
					{ name: 'Node 2', status: 'Active' },
					{ name: 'Node 3', status: 'Inactive' },
					{ name: 'Node 4', status: 'Active' },
				],
				links: [
					{ source: 'Node 1', target: 'Node 2' },
					{ source: 'Node 2', target: 'Node 3' },
					{ source: 'Node 4', target: 'Node 2' },
				],
			};
			let canvas = d3.select('#network'),
				width = canvas.attr('width'),
				height = canvas.attr('height'),
				ctx = canvas.node().getContext('2d');
			r = 40;
			(color = d3.scaleOrdinal(d3.schemeCategory20)),
				(simulation = d3
					.forceSimulation()
					.force('x', d3.forceX(width / 2))
					.force('y', d3.forceY(height / 2))
					.force('collide', d3.forceCollide(r + 60))
					.force('charge', d3.forceManyBody().strength(20))
					.force(
						'link',
						d3.forceLink().id(function (d) {
							return d.name;
						})
					));

			d3.json('/nodes.json', function (err, graph) {
				if (err) throw err;
				simulation.nodes(graph.nodes);
				simulation.force('link').links(graph.links);
				simulation.on('tick', update);

				canvas.call(
					d3
						.drag()
						.container(canvas.node())
						.subject(dragsubject)
						.on('start', dragstarted)
						.on('drag', dragged)
						.on('end', dragended)
				);

				function update() {
					ctx.clearRect(0, 0, width, height);
					ctx.beginPath();
					ctx.globalAlpha = 0.5;
					ctx.strokeStyle = '#aaa';
					graph.links.forEach(drawLink);
					ctx.stroke();

					ctx.beginPath();
					ctx.globalAlpha = 1;
					graph.nodes.forEach(drawNode);
				}
				function dragsubject() {
					return simulation.find(d3.event.x, d3.event.y);
				}
			});

			function dragstarted() {
				if (!d3.event.active) simulation.alphaTarget(0.01).restart();
				d3.event.subject.fx = d3.event.subject.x;
				d3.event.subject.fy = d3.event.subject.y;
				console.log(d3.event.subject);
			}

			function dragged() {
				d3.event.subject.fx = d3.event.x;
				d3.event.subject.fy = d3.event.y;
			}

			function dragended() {
				if (!d3.event.active) simulation.alphaTarget(0);
				d3.event.subject.fx = null;
				d3.event.subject.fy = null;
			}

			function drawNode(d) {
				ctx.fillStyle = color(d.body);
				ctx.moveTo(d.x, d.y);
				ctx.arc(d.x, d.y, r, 0, Math.PI * 2);
				ctx.fill();
			}

			function drawLink(l) {
				ctx.moveTo(l.source.x, l.source.y);
				ctx.lineTo(l.target.x, l.target.y);
			}
		</script>
	</body>
</html>
